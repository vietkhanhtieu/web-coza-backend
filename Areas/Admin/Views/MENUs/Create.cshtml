@model Final.Models.MENU

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/MyLayout.cshtml";
}

@section _Header{
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" integrity="sha512-b9OvT0OywpXYIyPy2wT7F12RmE+JZV+/mKAQ1j7VXvNE69Gh7z/Ki3qghmOtgmPjM5i5o5N5NakF5n9rN92Q1g==" crossorigin="anonymous" referrerpolicy="no-referrer" />
}
<style>
    p{
        font-weight: bold;
    }
</style>

<div style="margin: 0px 5px">
    <div class="col-md-12">
        <div class="panel panel-primary">

            <div class="panel-heading" style="text-align: center">
                Create MENU
            </div>

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4></h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    
                    <div class="form-group">

                        <p class = "control-label col-md-2" >Tên Menu</p>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.NAME, new { htmlAttributes = new { @class = "form-control", id = "name", oninput = "uppercaseInput(this)" } })
                            @Html.ValidationMessageFor(model => model.NAME, "", new { @class = "text-danger" })
                        </div>
                    </div>
                   

                    <div class="form-group">
                        <p class="control-label col-md-2">Link</p>

                        <div class="col-md-8">
                            @Html.EditorFor(model => model.LINK, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LINK, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <p class="control-label col-md-2" >Meta</p>

                        <div class="col-md-8">
                            @Html.EditorFor(model => model.META, new { htmlAttributes = new { @class = "form-control", id = "meta" } })
                            @Html.ValidationMessageFor(model => model.META, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <p class="control-label col-md-2">Hiển thị</p>

                        <div class="col-md-8">
                                @{
                                    bool hide = true;
                                }
                                @Html.CheckBoxFor(Model => hide)
                                @Html.ValidationMessageFor(model => model.HIDE, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <p class="control-label col-md-2">Vị trí</p>

                        <div class="col-md-8">
                            @Html.EditorFor(model => model.ORDER, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ORDER, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <p class="control-label col-md-2">Ngày đăng</p>

                        <div class="col-md-8">
                            
                            @Html.EditorFor(model => model.DATE_BEGIN, new { htmlAttributes = new { @class = "form-control", id = "myDateTimeInput" } })
                            @Html.ValidationMessageFor(model => model.DATE_BEGIN, "", new { @class = "text-danger" })

                            @*<input class="form-control" name="@Model.DATE_BEGIN" value="@Html.Raw(DateTime.Now.ToString("yyyy-MM-dd HH:mm").Replace(' ','T'))" type="datetime-local" />*@
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-success" />
                            @Html.ActionLink("Back to List", "Index")
                        </div>
                    </div>
                </div>
            }

            

        </div>
 </div>
    </div>
@section _Footer{
    <script src="~/Areas/Admin/Content/assets/vendor/datatables/dataTables.bootstrap4.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js">
    </script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js">
    </script>
}

<script>
    var currentDateTime = new Date();
    var formattedDateTime = currentDateTime.getFullYear() + '-' +
        ('0' + (currentDateTime.getMonth() + 1)).slice(-2) + '-' +
        ('0' + currentDateTime.getDate()).slice(-2) + 'T' +
        ('0' + currentDateTime.getHours()).slice(-2) + ':' +
        ('0' + currentDateTime.getMinutes()).slice(-2);
    document.getElementById("myDateTimeInput").value = formattedDateTime;

    $(function () {
        $("#name").keyup(function () {
            var text = $.trim($(this).val().toLowerCase());
            var text_create;
            text_create = convertToUnsign(text)
            $('#meta').val(text_create);
        }).keyup();
    });
   

    

    function convertToUnsign(str) {
        var vietnameseSigns = [
            "aAeEoOuUiIdDyY-",
            "áàạảãâấầậẩẫăắằặẳẵ",
            "ÁÀẠẢÃÂẤẦẬẨẪĂẮẰẶẲẴ",
            "éèẹẻẽêếềệểễ",
            "ÉÈẸẺẼÊẾỀỆỂỄ",
            "óòọỏõôốồộổỗơớờợởỡ",
            "ÓÒỌỎÕÔỐỒỘỔỖƠỚỜỢỞỠ",
            "úùụủũưứừựửữ",
            "ÚÙỤỦŨƯỨỪỰỬỮ",
            "íìịỉĩ",
            "ÍÌỊỈĨ",
            "đ",
            "Đ",
            "ýỳỵỷỹ",
            "ÝỲỴỶỸ",
            "               "
        ];

        for (var i = 1; i < vietnameseSigns.length; i++) {
            for (var j = 0; j < vietnameseSigns[i].length; j++) {
                str = str.replace(vietnameseSigns[i][j], vietnameseSigns[0][i - 1]);
            }
        }

        return str;
    }

    function uppercaseInput(input) {
        input.value = input.value.toUpperCase();
    }

</script>
